;/*****************************************************
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;#define ADC_VREF_TYPE 0x00
;// Declare your global variables here
;unsigned long ADC_out=0;
;unsigned int chuc, dvi;
;unsigned long nhietdo;
;unsigned long dienap;
;unsigned long dem=0;
;unsigned int T1=240;
;unsigned int T2=190;
;int iop;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001C ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001D // Delay needed for the stabilization of the ADC input voltage
; 0000 001E delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 001F // Start the AD conversion
; 0000 0020 ADCSRA|=0x40; //ADCSRA=ADCSRA | 0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0021 // Wait for the AD conversion to complete
; 0000 0022 while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0023 ADCSRA|=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0024 return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0025 }
;PCODE: $00000020 VOL: 0
;
;//UART
;void uart_char_send(unsigned char chr){
; 0000 0028 void uart_char_send(unsigned char chr){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0029     while (!(UCSRA &(1<<UDRE))) {};
;	chr -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002A         UDR=chr;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002B }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;void uart_string_send(unsigned char *txt){
; 0000 002D void uart_string_send(unsigned char *txt){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002E     unsigned char n, i;
; 0000 002F     n=strlen(txt);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;	*txt -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0030         for (i=0; i<n; i++){
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0031         uart_char_send(txt[i]);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0032         }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0033 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;//Ngat nhan UART cho mot ky tu
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0036 {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0037 char data;
; 0000 0038 data=UDR;
;PCODE: $00000052 VOL: 0
;	data -> R17
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0039 if(data == '1'){
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003A     PORTC.0=0x01; }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 003B if(data == 'q'){
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003C     PORTC.0=0x00; }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003D if(data == '2'){
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003E     PORTC.1=0x01; }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003F if(data == 'w'){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0040     PORTC.1=0x00; }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0041 if(data == '3'){
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0042     PORTC.2=0x01; }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0043 if(data == 'e'){
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0044     PORTC.2=0x00; }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0045 if(data == '4'){
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0046     PORTC.3=0x01; }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0047 if(data == 'r'){
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0048     PORTC.3=0x00; }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0049 if(data == '5'){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 004A     PORTC.4=0x01; }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 004B if(data == 't'){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 004C     PORTC.4=0x00; }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004D if(data == '6'){
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 004E     PORTC.5=0x01; }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 004F if(data == 'y'){
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0050     PORTC.5=0x00; }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0051 if(data == '7'){
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0052     PORTC.6=0x01; }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0053 if(data == 'u'){
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0054     PORTC.6=0x00; }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0055 if(data == '8'){
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0056     PORTC.7=0x01; }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0057 if(data == 'i'){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0058     PORTC.7=0x00; }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0059 //Timer 1
; 0000 005A if(data =='x')
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 005B     {iop=0;}
;PCODE: $000000B8 VOL: 0
; 0000 005C if(data == 'c')
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 005D     {iop=1;}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 005E if(data == 'a')//500ms
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 005F     {
; 0000 0060     T1=240;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0061     T2=190;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0062     }
; 0000 0063 if(data == 's')//1000ms
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0064     {
; 0000 0065     T1=225;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0066     T2=124;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0067     }
; 0000 0068 if(data == 'd')//1500ms
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0069     {
; 0000 006A     T1=210;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 006B     T2=58;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 006C     }
; 0000 006D if(data == 'f')//2000ms
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 006E     {
; 0000 006F     T1=194;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0070     T2=248;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0071     }
; 0000 0072 if(data == 'g')//2500ms
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0073     {
; 0000 0074     T1=179;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0075     T2=180;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0076     }
; 0000 0077 if(data == 'h')//3000ms
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0078     {
; 0000 0079     T1=163;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 007A     T2=115;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 007B     }
; 0000 007C if(data == 'j')//3500ms
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 007D     {
; 0000 007E     T1=149;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 007F     T2=49;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0080     }
; 0000 0081 if(data == 'k')//4000ms
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0082     {
; 0000 0083     T1=133;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0084     T2=239;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0085     }
; 0000 0086 if(data == 'l')//4500ms
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0087     {
; 0000 0088     T1=118;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0089     T2=171;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 008A     }
; 0000 008B if(data == 'z')//5000ms
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 008C     {
; 0000 008D     T1=103;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 008E     T2=190;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 008F     }
; 0000 0090 }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ngat0(void)
; 0000 0093 {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0094 // Place your code here
; 0000 0095     dem+=1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0096     chuc=(dem%100)/10;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0097     dvi=dem%10;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0098     uart_char_send(chuc + 0x30);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0099     uart_char_send(dvi + 0x30);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 009A     uart_char_send(13);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 009B     delay_ms(200);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 009C }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 009F {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00A0     if(iop == 0){
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00A1         PORTB.1 = 0x00;}
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00A2     if(iop == 1){
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00A3         PORTB.1 = ~PORTB.1;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00A4         TCNT1H=T1;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00A5         TCNT1L=T2;}
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00A6 }
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;void main(void)
; 0000 00A8 {
;PCODE: $00000151 VOL: 0
; 0000 00A9 // Declare your local variables here
; 0000 00AA 
; 0000 00AB // Input/Output Ports initialization
; 0000 00AC // Port A initialization
; 0000 00AD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00AF PORTA=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00B0 DDRA=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00B1 
; 0000 00B2 // Port B initialization
; 0000 00B3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B5 PORTB=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00B6 DDRB=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00B7 
; 0000 00B8 // Port C initialization
; 0000 00B9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00BA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00BB PORTC=0x00;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00BC DDRC=0xff;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00BD 
; 0000 00BE // Port D initialization
; 0000 00BF // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C0 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C1 PORTD=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00C2 DDRD=0xfe;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer/Counter 0 initialization
; 0000 00C5 // Clock source: System Clock
; 0000 00C6 // Clock value: Timer 0 Stopped
; 0000 00C7 // Mode: Normal top=0xFF
; 0000 00C8 // OC0 output: Disconnected
; 0000 00C9 TCCR0=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00CA TCNT0=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00CB OCR0=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00CC 
; 0000 00CD //Timer 1
; 0000 00CE TCCR1B=0x05;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00CF TIMSK=0x04;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00D0 TCNT1H=T1;//0xc2
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00D1 TCNT1L=T2;//0xf6
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00D2 
; 0000 00D3 // Timer/Counter 2 initialization
; 0000 00D4 // Clock source: System Clock
; 0000 00D5 // Clock value: Timer2 Stopped
; 0000 00D6 // Mode: Normal top=0xFF
; 0000 00D7 // OC2 output: Disconnected
; 0000 00D8 ASSR=0x00;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00D9 TCCR2=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00DA TCNT2=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00DB OCR2=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00DC 
; 0000 00DD // External Interrupt(s) initialization
; 0000 00DE // INT0: On
; 0000 00DF // INT0 Mode: Falling Edge
; 0000 00E0 // INT1: Off
; 0000 00E1 // INT2: Off
; 0000 00E2 GICR|=0x40;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00E3 MCUCR=0x02;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00E4 MCUCSR=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E5 GIFR=0x40;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00E6 
; 0000 00E7 // USART initialization
; 0000 00E8 // Communication Parameters:
; 0000 00E9 //8 Data, 1 Stop, No Parity
; 0000 00EA // USART Receiver: On
; 0000 00EB // USART Transmitter: On
; 0000 00EC // USART Mode: Asynchronous
; 0000 00ED // USART Baud Rate: 9600
; 0000 00EE UCSRA=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00EF UCSRC=0x86;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00F0 UCSRB=0x98;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00F1 UBRRH=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00F2 UBRRL=0x33;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00F3 
; 0000 00F4 // Analog Comparator initialization
; 0000 00F5 // Analog Comparator: Off
; 0000 00F6 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F7 ACSR=0x80;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00F8 SFIOR=0x00;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00F9 
; 0000 00FA // ADC initialization
; 0000 00FB // ADC Clock frequency: 1000.000 kHz
; 0000 00FC // ADC Voltage Reference: AREF pin
; 0000 00FD // ADC Auto Trigger Source: ADC Stopped
; 0000 00FE ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00FF ADCSRA=0x83;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0100 
; 0000 0101 // SPI initialization
; 0000 0102 // SPI disabled
; 0000 0103 SPCR=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0104 
; 0000 0105 // TWI initialization
; 0000 0106 // TWI disabled
; 0000 0107 TWCR=0x00;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0108 
; 0000 0109 GICR|=0xC0; //GICR = GICR|0xC0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 010A MCUCR=0x0F;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 010B 
; 0000 010C // Global enable interrupts
; 0000 010D #asm("sei")
;PCODE: $0000019C VOL: 0
	sei
;PCODE: $0000019D VOL: 0
; 0000 010E while (1)
;PCODE: $0000019E VOL: 0
; 0000 010F       {
; 0000 0110         ADC_out=read_adc(0);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0111         dienap = ADC_out*5000/1023;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0112         nhietdo=dienap/10;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0113         chuc=nhietdo/10;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0114         dvi=nhietdo%10;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0115         uart_char_send(chuc + 0x30);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0116         uart_char_send(dvi + 0x30);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0117         uart_char_send(10);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0118         uart_char_send(13);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0119         delay_ms(200);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 011A }
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 011B }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
