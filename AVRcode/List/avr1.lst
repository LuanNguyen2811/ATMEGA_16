
AVRASM ver. 2.1.30  C:\Users\admin\Desktop\KTvixuly\List\avr1.asm Wed Dec 27 10:40:30 2023

C:\Users\admin\Desktop\KTvixuly\List\avr1.asm(1059): warning: Register r4 already defined by the .DEF directive
C:\Users\admin\Desktop\KTvixuly\List\avr1.asm(1060): warning: Register r6 already defined by the .DEF directive
C:\Users\admin\Desktop\KTvixuly\List\avr1.asm(1061): warning: Register r8 already defined by the .DEF directive
C:\Users\admin\Desktop\KTvixuly\List\avr1.asm(1062): warning: Register r10 already defined by the .DEF directive
C:\Users\admin\Desktop\KTvixuly\List\avr1.asm(1063): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _chuc=R4
                 	.DEF _dvi=R6
                 	.DEF _T1=R8
                 	.DEF _T2=R10
                 	.DEF _iop=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0110 	JMP  _ngat0
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0154 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 007b 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x52:
000033 00f0
000034 00be      	.DB  0xF0,0x0,0xBE,0x0
                 
                 __GLOBAL_INI_TBL:
000035 0004      	.DW  0x04
000036 0008      	.DW  0x08
000037 0066      	.DW  _0x52*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000040 e1f8      	LDI  R31,0x18
000041 bdf1      	OUT  WDTCR,R31
000042 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 016f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;#define ADC_VREF_TYPE 0x00
                 ;// Declare your global variables here
                 ;unsigned long ADC_out=0;
                 ;unsigned int chuc, dvi;
                 ;unsigned long nhietdo;
                 ;unsigned long dienap;
                 ;unsigned long dem=0;
                 ;unsigned int T1=240;
                 ;unsigned int T2=190;
                 ;int iop;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 001B {
                 
                 	.CSEG
                 _read_adc:
                 ; 0000 001C ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
000069 81e8      	LD   R30,Y
00006a b9e7      	OUT  0x7,R30
                 ; 0000 001D // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001E delay_us(10);
                +
00006b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00006c 958a     +DEC R24
00006d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001F // Start the AD conversion
                 ; 0000 0020 ADCSRA|=0x40; //ADCSRA=ADCSRA | 0x40;
00006e 9a36      	SBI  0x6,6
                 ; 0000 0021 // Wait for the AD conversion to complete
                 ; 0000 0022 while ((ADCSRA & 0x10)==0);
                 _0x3:
00006f 9b34      	SBIS 0x6,4
000070 cffe      	RJMP _0x3
                 ; 0000 0023 ADCSRA|=0x10;
000071 9a34      	SBI  0x6,4
                 ; 0000 0024 return ADCW;
000072 b1e4      	IN   R30,0x4
000073 b1f5      	IN   R31,0x4+1
000074 c004      	RJMP _0x2060001
                 ; 0000 0025 }
                 ;
                 ;//UART
                 ;void uart_char_send(unsigned char chr){
                 ; 0000 0028 void uart_char_send(unsigned char chr){
                 _uart_char_send:
                 ; 0000 0029     while (!(UCSRA &(1<<UDRE))) {};
                 ;	chr -> Y+0
                 _0x6:
000075 9b5d      	SBIS 0xB,5
000076 cffe      	RJMP _0x6
                 ; 0000 002A         UDR=chr;
000077 81e8      	LD   R30,Y
000078 b9ec      	OUT  0xC,R30
                 ; 0000 002B }
                 _0x2060001:
000079 9621      	ADIW R28,1
00007a 9508      	RET
                 ;
                 ;void uart_string_send(unsigned char *txt){
                 ; 0000 002D void uart_string_send(unsigned char *txt){
                 ; 0000 002E     unsigned char n, i;
                 ; 0000 002F     n=strlen(txt);
                 ;	*txt -> Y+2
                 ;	n -> R17
                 ;	i -> R16
                 ; 0000 0030         for (i=0; i<n; i++){
                 ; 0000 0031         uart_char_send(txt[i]);
                 ; 0000 0032         }
                 ; 0000 0033 }
                 ;//Ngat nhan UART cho mot ky tu
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0036 {
                 _usart_rx_isr:
00007b 93ea      	ST   -Y,R30
00007c 93fa      	ST   -Y,R31
00007d b7ef      	IN   R30,SREG
00007e 93ea      	ST   -Y,R30
                 ; 0000 0037 char data;
                 ; 0000 0038 data=UDR;
00007f 931a      	ST   -Y,R17
                 ;	data -> R17
000080 b11c      	IN   R17,12
                 ; 0000 0039 if(data == '1'){
000081 3311      	CPI  R17,49
000082 f409      	BRNE _0xC
                 ; 0000 003A     PORTC.0=0x01; }
000083 9aa8      	SBI  0x15,0
                 ; 0000 003B if(data == 'q'){
                 _0xC:
000084 3711      	CPI  R17,113
000085 f409      	BRNE _0xF
                 ; 0000 003C     PORTC.0=0x00; }
000086 98a8      	CBI  0x15,0
                 ; 0000 003D if(data == '2'){
                 _0xF:
000087 3312      	CPI  R17,50
000088 f409      	BRNE _0x12
                 ; 0000 003E     PORTC.1=0x01; }
000089 9aa9      	SBI  0x15,1
                 ; 0000 003F if(data == 'w'){
                 _0x12:
00008a 3717      	CPI  R17,119
00008b f409      	BRNE _0x15
                 ; 0000 0040     PORTC.1=0x00; }
00008c 98a9      	CBI  0x15,1
                 ; 0000 0041 if(data == '3'){
                 _0x15:
00008d 3313      	CPI  R17,51
00008e f409      	BRNE _0x18
                 ; 0000 0042     PORTC.2=0x01; }
00008f 9aaa      	SBI  0x15,2
                 ; 0000 0043 if(data == 'e'){
                 _0x18:
000090 3615      	CPI  R17,101
000091 f409      	BRNE _0x1B
                 ; 0000 0044     PORTC.2=0x00; }
000092 98aa      	CBI  0x15,2
                 ; 0000 0045 if(data == '4'){
                 _0x1B:
000093 3314      	CPI  R17,52
000094 f409      	BRNE _0x1E
                 ; 0000 0046     PORTC.3=0x01; }
000095 9aab      	SBI  0x15,3
                 ; 0000 0047 if(data == 'r'){
                 _0x1E:
000096 3712      	CPI  R17,114
000097 f409      	BRNE _0x21
                 ; 0000 0048     PORTC.3=0x00; }
000098 98ab      	CBI  0x15,3
                 ; 0000 0049 if(data == '5'){
                 _0x21:
000099 3315      	CPI  R17,53
00009a f409      	BRNE _0x24
                 ; 0000 004A     PORTC.4=0x01; }
00009b 9aac      	SBI  0x15,4
                 ; 0000 004B if(data == 't'){
                 _0x24:
00009c 3714      	CPI  R17,116
00009d f409      	BRNE _0x27
                 ; 0000 004C     PORTC.4=0x00; }
00009e 98ac      	CBI  0x15,4
                 ; 0000 004D if(data == '6'){
                 _0x27:
00009f 3316      	CPI  R17,54
0000a0 f409      	BRNE _0x2A
                 ; 0000 004E     PORTC.5=0x01; }
0000a1 9aad      	SBI  0x15,5
                 ; 0000 004F if(data == 'y'){
                 _0x2A:
0000a2 3719      	CPI  R17,121
0000a3 f409      	BRNE _0x2D
                 ; 0000 0050     PORTC.5=0x00; }
0000a4 98ad      	CBI  0x15,5
                 ; 0000 0051 if(data == '7'){
                 _0x2D:
0000a5 3317      	CPI  R17,55
0000a6 f409      	BRNE _0x30
                 ; 0000 0052     PORTC.6=0x01; }
0000a7 9aae      	SBI  0x15,6
                 ; 0000 0053 if(data == 'u'){
                 _0x30:
0000a8 3715      	CPI  R17,117
0000a9 f409      	BRNE _0x33
                 ; 0000 0054     PORTC.6=0x00; }
0000aa 98ae      	CBI  0x15,6
                 ; 0000 0055 if(data == '8'){
                 _0x33:
0000ab 3318      	CPI  R17,56
0000ac f409      	BRNE _0x36
                 ; 0000 0056     PORTC.7=0x01; }
0000ad 9aaf      	SBI  0x15,7
                 ; 0000 0057 if(data == 'i'){
                 _0x36:
0000ae 3619      	CPI  R17,105
0000af f409      	BRNE _0x39
                 ; 0000 0058     PORTC.7=0x00; }
0000b0 98af      	CBI  0x15,7
                 ; 0000 0059 //Timer 1
                 ; 0000 005A if(data =='x')
                 _0x39:
0000b1 3718      	CPI  R17,120
0000b2 f411      	BRNE _0x3C
                 ; 0000 005B     {iop=0;}
0000b3 24cc      	CLR  R12
0000b4 24dd      	CLR  R13
                 ; 0000 005C if(data == 'c')
                 _0x3C:
0000b5 3613      	CPI  R17,99
0000b6 f419      	BRNE _0x3D
                 ; 0000 005D     {iop=1;}
0000b7 e0e1      	LDI  R30,LOW(1)
0000b8 e0f0      	LDI  R31,HIGH(1)
0000b9 016f      	MOVW R12,R30
                 ; 0000 005E if(data == 'a')//500ms
                 _0x3D:
0000ba 3611      	CPI  R17,97
0000bb f431      	BRNE _0x3E
                 ; 0000 005F     {
                 ; 0000 0060     T1=240;
0000bc efe0      	LDI  R30,LOW(240)
0000bd e0f0      	LDI  R31,HIGH(240)
0000be 014f      	MOVW R8,R30
                 ; 0000 0061     T2=190;
0000bf ebee      	LDI  R30,LOW(190)
0000c0 e0f0      	LDI  R31,HIGH(190)
0000c1 015f      	MOVW R10,R30
                 ; 0000 0062     }
                 ; 0000 0063 if(data == 's')//1000ms
                 _0x3E:
0000c2 3713      	CPI  R17,115
0000c3 f431      	BRNE _0x3F
                 ; 0000 0064     {
                 ; 0000 0065     T1=225;
0000c4 eee1      	LDI  R30,LOW(225)
0000c5 e0f0      	LDI  R31,HIGH(225)
0000c6 014f      	MOVW R8,R30
                 ; 0000 0066     T2=124;
0000c7 e7ec      	LDI  R30,LOW(124)
0000c8 e0f0      	LDI  R31,HIGH(124)
0000c9 015f      	MOVW R10,R30
                 ; 0000 0067     }
                 ; 0000 0068 if(data == 'd')//1500ms
                 _0x3F:
0000ca 3614      	CPI  R17,100
0000cb f431      	BRNE _0x40
                 ; 0000 0069     {
                 ; 0000 006A     T1=210;
0000cc ede2      	LDI  R30,LOW(210)
0000cd e0f0      	LDI  R31,HIGH(210)
0000ce 014f      	MOVW R8,R30
                 ; 0000 006B     T2=58;
0000cf e3ea      	LDI  R30,LOW(58)
0000d0 e0f0      	LDI  R31,HIGH(58)
0000d1 015f      	MOVW R10,R30
                 ; 0000 006C     }
                 ; 0000 006D if(data == 'f')//2000ms
                 _0x40:
0000d2 3616      	CPI  R17,102
0000d3 f431      	BRNE _0x41
                 ; 0000 006E     {
                 ; 0000 006F     T1=194;
0000d4 ece2      	LDI  R30,LOW(194)
0000d5 e0f0      	LDI  R31,HIGH(194)
0000d6 014f      	MOVW R8,R30
                 ; 0000 0070     T2=248;
0000d7 efe8      	LDI  R30,LOW(248)
0000d8 e0f0      	LDI  R31,HIGH(248)
0000d9 015f      	MOVW R10,R30
                 ; 0000 0071     }
                 ; 0000 0072 if(data == 'g')//2500ms
                 _0x41:
0000da 3617      	CPI  R17,103
0000db f431      	BRNE _0x42
                 ; 0000 0073     {
                 ; 0000 0074     T1=179;
0000dc ebe3      	LDI  R30,LOW(179)
0000dd e0f0      	LDI  R31,HIGH(179)
0000de 014f      	MOVW R8,R30
                 ; 0000 0075     T2=180;
0000df ebe4      	LDI  R30,LOW(180)
0000e0 e0f0      	LDI  R31,HIGH(180)
0000e1 015f      	MOVW R10,R30
                 ; 0000 0076     }
                 ; 0000 0077 if(data == 'h')//3000ms
                 _0x42:
0000e2 3618      	CPI  R17,104
0000e3 f431      	BRNE _0x43
                 ; 0000 0078     {
                 ; 0000 0079     T1=163;
0000e4 eae3      	LDI  R30,LOW(163)
0000e5 e0f0      	LDI  R31,HIGH(163)
0000e6 014f      	MOVW R8,R30
                 ; 0000 007A     T2=115;
0000e7 e7e3      	LDI  R30,LOW(115)
0000e8 e0f0      	LDI  R31,HIGH(115)
0000e9 015f      	MOVW R10,R30
                 ; 0000 007B     }
                 ; 0000 007C if(data == 'j')//3500ms
                 _0x43:
0000ea 361a      	CPI  R17,106
0000eb f431      	BRNE _0x44
                 ; 0000 007D     {
                 ; 0000 007E     T1=149;
0000ec e9e5      	LDI  R30,LOW(149)
0000ed e0f0      	LDI  R31,HIGH(149)
0000ee 014f      	MOVW R8,R30
                 ; 0000 007F     T2=49;
0000ef e3e1      	LDI  R30,LOW(49)
0000f0 e0f0      	LDI  R31,HIGH(49)
0000f1 015f      	MOVW R10,R30
                 ; 0000 0080     }
                 ; 0000 0081 if(data == 'k')//4000ms
                 _0x44:
0000f2 361b      	CPI  R17,107
0000f3 f431      	BRNE _0x45
                 ; 0000 0082     {
                 ; 0000 0083     T1=133;
0000f4 e8e5      	LDI  R30,LOW(133)
0000f5 e0f0      	LDI  R31,HIGH(133)
0000f6 014f      	MOVW R8,R30
                 ; 0000 0084     T2=239;
0000f7 eeef      	LDI  R30,LOW(239)
0000f8 e0f0      	LDI  R31,HIGH(239)
0000f9 015f      	MOVW R10,R30
                 ; 0000 0085     }
                 ; 0000 0086 if(data == 'l')//4500ms
                 _0x45:
0000fa 361c      	CPI  R17,108
0000fb f431      	BRNE _0x46
                 ; 0000 0087     {
                 ; 0000 0088     T1=118;
0000fc e7e6      	LDI  R30,LOW(118)
0000fd e0f0      	LDI  R31,HIGH(118)
0000fe 014f      	MOVW R8,R30
                 ; 0000 0089     T2=171;
0000ff eaeb      	LDI  R30,LOW(171)
000100 e0f0      	LDI  R31,HIGH(171)
000101 015f      	MOVW R10,R30
                 ; 0000 008A     }
                 ; 0000 008B if(data == 'z')//5000ms
                 _0x46:
000102 371a      	CPI  R17,122
000103 f431      	BRNE _0x47
                 ; 0000 008C     {
                 ; 0000 008D     T1=103;
000104 e6e7      	LDI  R30,LOW(103)
000105 e0f0      	LDI  R31,HIGH(103)
000106 014f      	MOVW R8,R30
                 ; 0000 008E     T2=190;
000107 ebee      	LDI  R30,LOW(190)
000108 e0f0      	LDI  R31,HIGH(190)
000109 015f      	MOVW R10,R30
                 ; 0000 008F     }
                 ; 0000 0090 }
                 _0x47:
00010a 9119      	LD   R17,Y+
00010b 91e9      	LD   R30,Y+
00010c bfef      	OUT  SREG,R30
00010d 91f9      	LD   R31,Y+
00010e 91e9      	LD   R30,Y+
00010f 9518      	RETI
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ngat0(void)
                 ; 0000 0093 {
                 _ngat0:
000110 920a      	ST   -Y,R0
000111 921a      	ST   -Y,R1
000112 92fa      	ST   -Y,R15
000113 936a      	ST   -Y,R22
000114 937a      	ST   -Y,R23
000115 938a      	ST   -Y,R24
000116 939a      	ST   -Y,R25
000117 93aa      	ST   -Y,R26
000118 93ba      	ST   -Y,R27
000119 93ea      	ST   -Y,R30
00011a 93fa      	ST   -Y,R31
00011b b7ef      	IN   R30,SREG
00011c 93ea      	ST   -Y,R30
                 ; 0000 0094 // Place your code here
                 ; 0000 0095     dem+=1;
00011d 91e0 016c 	LDS  R30,_dem
00011f 91f0 016d 	LDS  R31,_dem+1
000121 9160 016e 	LDS  R22,_dem+2
000123 9170 016f 	LDS  R23,_dem+3
                +
000125 5fef     +SUBI R30 , LOW ( - 1 )
000126 4fff     +SBCI R31 , HIGH ( - 1 )
000127 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000128 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000129 93e0 016c 	STS  _dem,R30
00012b 93f0 016d 	STS  _dem+1,R31
00012d 9360 016e 	STS  _dem+2,R22
00012f 9370 016f 	STS  _dem+3,R23
                 ; 0000 0096     chuc=(dem%100)/10;
000131 940e 01f6 	CALL SUBOPT_0x0
                +
000133 e6e4     +LDI R30 , LOW ( 0x64 )
000134 e0f0     +LDI R31 , HIGH ( 0x64 )
000135 e060     +LDI R22 , BYTE3 ( 0x64 )
000136 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
000137 940e 0276 	CALL __MODD21U
000139 01df      	MOVW R26,R30
00013a 01cb      	MOVW R24,R22
00013b 940e 01ff 	CALL SUBOPT_0x1
00013d 940e 0251 	CALL __DIVD21U
00013f 012f      	MOVW R4,R30
                 ; 0000 0097     dvi=dem%10;
000140 940e 01f6 	CALL SUBOPT_0x0
000142 940e 0204 	CALL SUBOPT_0x2
                 ; 0000 0098     uart_char_send(chuc + 0x30);
                 ; 0000 0099     uart_char_send(dvi + 0x30);
                 ; 0000 009A     uart_char_send(13);
000144 940e 0212 	CALL SUBOPT_0x3
                 ; 0000 009B     delay_ms(200);
                 ; 0000 009C }
000146 91e9      	LD   R30,Y+
000147 bfef      	OUT  SREG,R30
000148 91f9      	LD   R31,Y+
000149 91e9      	LD   R30,Y+
00014a 91b9      	LD   R27,Y+
00014b 91a9      	LD   R26,Y+
00014c 9199      	LD   R25,Y+
00014d 9189      	LD   R24,Y+
00014e 9179      	LD   R23,Y+
00014f 9169      	LD   R22,Y+
000150 90f9      	LD   R15,Y+
000151 9019      	LD   R1,Y+
000152 9009      	LD   R0,Y+
000153 9518      	RETI
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 009F {
                 _timer1_ovf_isr:
000154 920a      	ST   -Y,R0
000155 93ea      	ST   -Y,R30
000156 93fa      	ST   -Y,R31
000157 b7ef      	IN   R30,SREG
000158 93ea      	ST   -Y,R30
                 ; 0000 00A0     if(iop == 0){
000159 2c0c      	MOV  R0,R12
00015a 280d      	OR   R0,R13
00015b f409      	BRNE _0x48
                 ; 0000 00A1         PORTB.1 = 0x00;}
00015c 98c1      	CBI  0x18,1
                 ; 0000 00A2     if(iop == 1){
                 _0x48:
00015d e0e1      	LDI  R30,LOW(1)
00015e e0f0      	LDI  R31,HIGH(1)
00015f 15ec      	CP   R30,R12
000160 05fd      	CPC  R31,R13
000161 f439      	BRNE _0x4B
                 ; 0000 00A3         PORTB.1 = ~PORTB.1;
000162 9bc1      	SBIS 0x18,1
000163 c002      	RJMP _0x4C
000164 98c1      	CBI  0x18,1
000165 c001      	RJMP _0x4D
                 _0x4C:
000166 9ac1      	SBI  0x18,1
                 _0x4D:
                 ; 0000 00A4         TCNT1H=T1;
000167 bc8d      	OUT  0x2D,R8
                 ; 0000 00A5         TCNT1L=T2;}
000168 bcac      	OUT  0x2C,R10
                 ; 0000 00A6 }
                 _0x4B:
000169 91e9      	LD   R30,Y+
00016a bfef      	OUT  SREG,R30
00016b 91f9      	LD   R31,Y+
00016c 91e9      	LD   R30,Y+
00016d 9009      	LD   R0,Y+
00016e 9518      	RETI
                 ;void main(void)
                 ; 0000 00A8 {
                 _main:
                 ; 0000 00A9 // Declare your local variables here
                 ; 0000 00AA 
                 ; 0000 00AB // Input/Output Ports initialization
                 ; 0000 00AC // Port A initialization
                 ; 0000 00AD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00AE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00AF PORTA=0x00;
00016f e0e0      	LDI  R30,LOW(0)
000170 bbeb      	OUT  0x1B,R30
                 ; 0000 00B0 DDRA=0x00;
000171 bbea      	OUT  0x1A,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // Port B initialization
                 ; 0000 00B3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00B4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00B5 PORTB=0x00;
000172 bbe8      	OUT  0x18,R30
                 ; 0000 00B6 DDRB=0x00;
000173 bbe7      	OUT  0x17,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Port C initialization
                 ; 0000 00B9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00BA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00BB PORTC=0x00;
000174 bbe5      	OUT  0x15,R30
                 ; 0000 00BC DDRC=0xff;
000175 efef      	LDI  R30,LOW(255)
000176 bbe4      	OUT  0x14,R30
                 ; 0000 00BD 
                 ; 0000 00BE // Port D initialization
                 ; 0000 00BF // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00C0 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00C1 PORTD=0x00;
000177 e0e0      	LDI  R30,LOW(0)
000178 bbe2      	OUT  0x12,R30
                 ; 0000 00C2 DDRD=0xfe;
000179 efee      	LDI  R30,LOW(254)
00017a bbe1      	OUT  0x11,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Timer/Counter 0 initialization
                 ; 0000 00C5 // Clock source: System Clock
                 ; 0000 00C6 // Clock value: Timer 0 Stopped
                 ; 0000 00C7 // Mode: Normal top=0xFF
                 ; 0000 00C8 // OC0 output: Disconnected
                 ; 0000 00C9 TCCR0=0x00;
00017b e0e0      	LDI  R30,LOW(0)
00017c bfe3      	OUT  0x33,R30
                 ; 0000 00CA TCNT0=0x00;
00017d bfe2      	OUT  0x32,R30
                 ; 0000 00CB OCR0=0x00;
00017e bfec      	OUT  0x3C,R30
                 ; 0000 00CC 
                 ; 0000 00CD //Timer 1
                 ; 0000 00CE TCCR1B=0x05;
00017f e0e5      	LDI  R30,LOW(5)
000180 bdee      	OUT  0x2E,R30
                 ; 0000 00CF TIMSK=0x04;
000181 e0e4      	LDI  R30,LOW(4)
000182 bfe9      	OUT  0x39,R30
                 ; 0000 00D0 TCNT1H=T1;//0xc2
000183 bc8d      	OUT  0x2D,R8
                 ; 0000 00D1 TCNT1L=T2;//0xf6
000184 bcac      	OUT  0x2C,R10
                 ; 0000 00D2 
                 ; 0000 00D3 // Timer/Counter 2 initialization
                 ; 0000 00D4 // Clock source: System Clock
                 ; 0000 00D5 // Clock value: Timer2 Stopped
                 ; 0000 00D6 // Mode: Normal top=0xFF
                 ; 0000 00D7 // OC2 output: Disconnected
                 ; 0000 00D8 ASSR=0x00;
000185 e0e0      	LDI  R30,LOW(0)
000186 bde2      	OUT  0x22,R30
                 ; 0000 00D9 TCCR2=0x00;
000187 bde5      	OUT  0x25,R30
                 ; 0000 00DA TCNT2=0x00;
000188 bde4      	OUT  0x24,R30
                 ; 0000 00DB OCR2=0x00;
000189 bde3      	OUT  0x23,R30
                 ; 0000 00DC 
                 ; 0000 00DD // External Interrupt(s) initialization
                 ; 0000 00DE // INT0: On
                 ; 0000 00DF // INT0 Mode: Falling Edge
                 ; 0000 00E0 // INT1: Off
                 ; 0000 00E1 // INT2: Off
                 ; 0000 00E2 GICR|=0x40;
00018a b7eb      	IN   R30,0x3B
00018b 64e0      	ORI  R30,0x40
00018c bfeb      	OUT  0x3B,R30
                 ; 0000 00E3 MCUCR=0x02;
00018d e0e2      	LDI  R30,LOW(2)
00018e bfe5      	OUT  0x35,R30
                 ; 0000 00E4 MCUCSR=0x00;
00018f e0e0      	LDI  R30,LOW(0)
000190 bfe4      	OUT  0x34,R30
                 ; 0000 00E5 GIFR=0x40;
000191 e4e0      	LDI  R30,LOW(64)
000192 bfea      	OUT  0x3A,R30
                 ; 0000 00E6 
                 ; 0000 00E7 // USART initialization
                 ; 0000 00E8 // Communication Parameters:
                 ; 0000 00E9 //8 Data, 1 Stop, No Parity
                 ; 0000 00EA // USART Receiver: On
                 ; 0000 00EB // USART Transmitter: On
                 ; 0000 00EC // USART Mode: Asynchronous
                 ; 0000 00ED // USART Baud Rate: 9600
                 ; 0000 00EE UCSRA=0x00;
000193 e0e0      	LDI  R30,LOW(0)
000194 b9eb      	OUT  0xB,R30
                 ; 0000 00EF UCSRC=0x86;
000195 e8e6      	LDI  R30,LOW(134)
000196 bde0      	OUT  0x20,R30
                 ; 0000 00F0 UCSRB=0x98;
000197 e9e8      	LDI  R30,LOW(152)
000198 b9ea      	OUT  0xA,R30
                 ; 0000 00F1 UBRRH=0x00;
000199 e0e0      	LDI  R30,LOW(0)
00019a bde0      	OUT  0x20,R30
                 ; 0000 00F2 UBRRL=0x33;
00019b e3e3      	LDI  R30,LOW(51)
00019c b9e9      	OUT  0x9,R30
                 ; 0000 00F3 
                 ; 0000 00F4 // Analog Comparator initialization
                 ; 0000 00F5 // Analog Comparator: Off
                 ; 0000 00F6 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00F7 ACSR=0x80;
00019d e8e0      	LDI  R30,LOW(128)
00019e b9e8      	OUT  0x8,R30
                 ; 0000 00F8 SFIOR=0x00;
00019f e0e0      	LDI  R30,LOW(0)
0001a0 bfe0      	OUT  0x30,R30
                 ; 0000 00F9 
                 ; 0000 00FA // ADC initialization
                 ; 0000 00FB // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00FC // ADC Voltage Reference: AREF pin
                 ; 0000 00FD // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00FE ADMUX=ADC_VREF_TYPE & 0xff;
0001a1 b9e7      	OUT  0x7,R30
                 ; 0000 00FF ADCSRA=0x83;
0001a2 e8e3      	LDI  R30,LOW(131)
0001a3 b9e6      	OUT  0x6,R30
                 ; 0000 0100 
                 ; 0000 0101 // SPI initialization
                 ; 0000 0102 // SPI disabled
                 ; 0000 0103 SPCR=0x00;
0001a4 e0e0      	LDI  R30,LOW(0)
0001a5 b9ed      	OUT  0xD,R30
                 ; 0000 0104 
                 ; 0000 0105 // TWI initialization
                 ; 0000 0106 // TWI disabled
                 ; 0000 0107 TWCR=0x00;
0001a6 bfe6      	OUT  0x36,R30
                 ; 0000 0108 
                 ; 0000 0109 GICR|=0xC0; //GICR = GICR|0xC0
0001a7 b7eb      	IN   R30,0x3B
0001a8 6ce0      	ORI  R30,LOW(0xC0)
0001a9 bfeb      	OUT  0x3B,R30
                 ; 0000 010A MCUCR=0x0F;
0001aa e0ef      	LDI  R30,LOW(15)
0001ab bfe5      	OUT  0x35,R30
                 ; 0000 010B 
                 ; 0000 010C // Global enable interrupts
                 ; 0000 010D #asm("sei")
0001ac 9478      	sei
                 ; 0000 010E while (1)
                 _0x4E:
                 ; 0000 010F       {
                 ; 0000 0110         ADC_out=read_adc(0);
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 93ea      	ST   -Y,R30
0001af deb9      	RCALL _read_adc
0001b0 2766      	CLR  R22
0001b1 2777      	CLR  R23
0001b2 93e0 0160 	STS  _ADC_out,R30
0001b4 93f0 0161 	STS  _ADC_out+1,R31
0001b6 9360 0162 	STS  _ADC_out+2,R22
0001b8 9370 0163 	STS  _ADC_out+3,R23
                 ; 0000 0111         dienap = ADC_out*5000/1023;
                +
0001ba e8a8     +LDI R26 , LOW ( 0x1388 )
0001bb e1b3     +LDI R27 , HIGH ( 0x1388 )
0001bc e080     +LDI R24 , BYTE3 ( 0x1388 )
0001bd e090     +LDI R25 , BYTE4 ( 0x1388 )
                 	__GETD2N 0x1388
0001be 940e 0231 	CALL __MULD12U
0001c0 01df      	MOVW R26,R30
0001c1 01cb      	MOVW R24,R22
                +
0001c2 efef     +LDI R30 , LOW ( 0x3FF )
0001c3 e0f3     +LDI R31 , HIGH ( 0x3FF )
0001c4 e060     +LDI R22 , BYTE3 ( 0x3FF )
0001c5 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
0001c6 940e 0251 	CALL __DIVD21U
0001c8 93e0 0168 	STS  _dienap,R30
0001ca 93f0 0169 	STS  _dienap+1,R31
0001cc 9360 016a 	STS  _dienap+2,R22
0001ce 9370 016b 	STS  _dienap+3,R23
                 ; 0000 0112         nhietdo=dienap/10;
0001d0 91a0 0168 	LDS  R26,_dienap
0001d2 91b0 0169 	LDS  R27,_dienap+1
0001d4 9180 016a 	LDS  R24,_dienap+2
0001d6 9190 016b 	LDS  R25,_dienap+3
0001d8 940e 01ff 	CALL SUBOPT_0x1
0001da 940e 0251 	CALL __DIVD21U
0001dc 93e0 0164 	STS  _nhietdo,R30
0001de 93f0 0165 	STS  _nhietdo+1,R31
0001e0 9360 0166 	STS  _nhietdo+2,R22
0001e2 9370 0167 	STS  _nhietdo+3,R23
                 ; 0000 0113         chuc=nhietdo/10;
0001e4 940e 021c 	CALL SUBOPT_0x4
0001e6 940e 01ff 	CALL SUBOPT_0x1
0001e8 940e 0251 	CALL __DIVD21U
0001ea 012f      	MOVW R4,R30
                 ; 0000 0114         dvi=nhietdo%10;
0001eb 940e 021c 	CALL SUBOPT_0x4
0001ed 940e 0204 	CALL SUBOPT_0x2
                 ; 0000 0115         uart_char_send(chuc + 0x30);
                 ; 0000 0116         uart_char_send(dvi + 0x30);
                 ; 0000 0117         uart_char_send(10);
0001ef e0ea      	LDI  R30,LOW(10)
0001f0 93ea      	ST   -Y,R30
0001f1 de83      	RCALL _uart_char_send
                 ; 0000 0118         uart_char_send(13);
0001f2 940e 0212 	CALL SUBOPT_0x3
                 ; 0000 0119         delay_ms(200);
                 ; 0000 011A }
0001f4 cfb8      	RJMP _0x4E
                 ; 0000 011B }
                 _0x51:
0001f5 cfff      	RJMP _0x51
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _ADC_out:
000160           	.BYTE 0x4
                 _nhietdo:
000164           	.BYTE 0x4
                 _dienap:
000168           	.BYTE 0x4
                 _dem:
00016c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001f6 91a0 016c 	LDS  R26,_dem
0001f8 91b0 016d 	LDS  R27,_dem+1
0001fa 9180 016e 	LDS  R24,_dem+2
0001fc 9190 016f 	LDS  R25,_dem+3
0001fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
                +
0001ff e0ea     +LDI R30 , LOW ( 0xA )
000200 e0f0     +LDI R31 , HIGH ( 0xA )
000201 e060     +LDI R22 , BYTE3 ( 0xA )
000202 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
000204 dffa      	RCALL SUBOPT_0x1
000205 940e 0276 	CALL __MODD21U
000207 013f      	MOVW R6,R30
000208 2de4      	MOV  R30,R4
000209 5de0      	SUBI R30,-LOW(48)
00020a 93ea      	ST   -Y,R30
00020b 940e 0075 	CALL _uart_char_send
00020d 2de6      	MOV  R30,R6
00020e 5de0      	SUBI R30,-LOW(48)
00020f 93ea      	ST   -Y,R30
000210 940c 0075 	JMP  _uart_char_send
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000212 e0ed      	LDI  R30,LOW(13)
000213 93ea      	ST   -Y,R30
000214 940e 0075 	CALL _uart_char_send
000216 ece8      	LDI  R30,LOW(200)
000217 e0f0      	LDI  R31,HIGH(200)
000218 93fa      	ST   -Y,R31
000219 93ea      	ST   -Y,R30
00021a 940c 0225 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00021c 91a0 0164 	LDS  R26,_nhietdo
00021e 91b0 0165 	LDS  R27,_nhietdo+1
000220 9180 0166 	LDS  R24,_nhietdo+2
000222 9190 0167 	LDS  R25,_nhietdo+3
000224 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000225 91e9      	ld   r30,y+
000226 91f9      	ld   r31,y+
000227 9630      	adiw r30,0
000228 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000229 ed80     +LDI R24 , LOW ( 0x7D0 )
00022a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00022b 9701     +SBIW R24 , 1
00022c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00022d 95a8      	wdr
00022e 9731      	sbiw r30,1
00022f f7c9      	brne __delay_ms0
                 __delay_ms1:
000230 9508      	ret
                 
                 __MULD12U:
000231 9f7a      	MUL  R23,R26
000232 2d70      	MOV  R23,R0
000233 9f6b      	MUL  R22,R27
000234 0d70      	ADD  R23,R0
000235 9ff8      	MUL  R31,R24
000236 0d70      	ADD  R23,R0
000237 9fe9      	MUL  R30,R25
000238 0d70      	ADD  R23,R0
000239 9f6a      	MUL  R22,R26
00023a 2d60      	MOV  R22,R0
00023b 0d71      	ADD  R23,R1
00023c 9ffb      	MUL  R31,R27
00023d 0d60      	ADD  R22,R0
00023e 1d71      	ADC  R23,R1
00023f 9fe8      	MUL  R30,R24
000240 0d60      	ADD  R22,R0
000241 1d71      	ADC  R23,R1
000242 2788      	CLR  R24
000243 9ffa      	MUL  R31,R26
000244 2df0      	MOV  R31,R0
000245 0d61      	ADD  R22,R1
000246 1f78      	ADC  R23,R24
000247 9feb      	MUL  R30,R27
000248 0df0      	ADD  R31,R0
000249 1d61      	ADC  R22,R1
00024a 1f78      	ADC  R23,R24
00024b 9fea      	MUL  R30,R26
00024c 2de0      	MOV  R30,R0
00024d 0df1      	ADD  R31,R1
00024e 1f68      	ADC  R22,R24
00024f 1f78      	ADC  R23,R24
000250 9508      	RET
                 
                 __DIVD21U:
000251 933f      	PUSH R19
000252 934f      	PUSH R20
000253 935f      	PUSH R21
000254 2400      	CLR  R0
000255 2411      	CLR  R1
000256 2744      	CLR  R20
000257 2755      	CLR  R21
000258 e230      	LDI  R19,32
                 __DIVD21U1:
000259 0faa      	LSL  R26
00025a 1fbb      	ROL  R27
00025b 1f88      	ROL  R24
00025c 1f99      	ROL  R25
00025d 1c00      	ROL  R0
00025e 1c11      	ROL  R1
00025f 1f44      	ROL  R20
000260 1f55      	ROL  R21
000261 1a0e      	SUB  R0,R30
000262 0a1f      	SBC  R1,R31
000263 0b46      	SBC  R20,R22
000264 0b57      	SBC  R21,R23
000265 f428      	BRCC __DIVD21U2
000266 0e0e      	ADD  R0,R30
000267 1e1f      	ADC  R1,R31
000268 1f46      	ADC  R20,R22
000269 1f57      	ADC  R21,R23
00026a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00026b 60a1      	SBR  R26,1
                 __DIVD21U3:
00026c 953a      	DEC  R19
00026d f759      	BRNE __DIVD21U1
00026e 01fd      	MOVW R30,R26
00026f 01bc      	MOVW R22,R24
000270 01d0      	MOVW R26,R0
000271 01ca      	MOVW R24,R20
000272 915f      	POP  R21
000273 914f      	POP  R20
000274 913f      	POP  R19
000275 9508      	RET
                 
                 __MODD21U:
000276 dfda      	RCALL __DIVD21U
000277 01fd      	MOVW R30,R26
000278 01bc      	MOVW R22,R24
000279 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  25 r1 :  13 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   2 r7 :   0 
r8 :  12 r9 :   0 r10:  12 r11:   0 r12:   4 r13:   3 r14:   0 r15:   2 
r16:   0 r17:  31 r18:   0 r19:   4 r20:   7 r21:   6 r22:  28 r23:  25 
r24:  30 r25:  11 r26:  20 r27:  12 r28:   2 r29:   1 r30: 181 r31:  55 
x  :   3 y  :  51 z  :   7 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :  10 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  37 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  20 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   1 cpi   :  28 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   0 jmp   :  24 ld    :  24 ldd   :   0 ldi   : 103 
lds   :  16 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   7 movw  :  37 
mul   :  10 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  51 pop   :   3 push  :   3 rcall :   4 ret   :   8 
reti  :   3 rjmp  :   9 rol   :   7 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :  11 sbic  :   0 sbis  :   3 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  30 std   :   0 sts   :  16 sub   :   1 subi  :   3 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004f4   1238     30   1268   16384   7.7%
[.dseg] 0x000060 0x000170      0     16     16    1119   1.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
